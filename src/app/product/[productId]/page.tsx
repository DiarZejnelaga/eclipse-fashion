
'use client';

import React, { useState, useEffect, useRef } from 'react';
import Image from 'next/image'; 
import { useParams } from 'next/navigation';
import Link from 'next/link';

import { productsData as allProductsData, Product, ProductImage, PLACEHOLDER_IMAGE_URL, StockDetail } from '@/app/data/products';
import Navbar from '@/app/components/Navbar';
import Footer from '@/app/components/Footer';
import NewsletterSection from '@/app/components/Newsletter';
import { useCart } from '@/app/context/cartContext';

const ColorSwatchPDP: React.FC<{ color: string; selected?: boolean; onClick?: () => void; }> = ({ color, selected, onClick }) => ( <button type="button" onClick={onClick} className={`w-8 h-8 rounded-full border-2 outline-none transition-all ${selected ? 'border-black ring-2 ring-offset-2 ring-black' : 'border-gray-300 hover:border-gray-500'} focus:ring-2 focus:ring-offset-1 focus:ring-indigo-500`} style={{ backgroundColor: color }} aria-label={`Color ${color}${selected ? ' (selected)' : ''}`} aria-pressed={selected} /> );
const SizeButtonPDP: React.FC<{ size: string; selected?: boolean; available?: boolean; onClick?: () => void; }> = ({ size, selected, available = true, onClick }) => ( <button type="button" onClick={onClick} disabled={!available} className={`h-10 w-10 sm:h-11 sm:w-11 flex items-center justify-center border rounded font-medium text-sm transition-colors outline-none ${selected ? 'bg-black text-white border-black' : 'border-gray-300 hover:border-black'} ${!available ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed relative after:absolute after:inset-0 after:bg-white after:opacity-50 after:content-[""] after:transform after:-rotate-45 after:scale-x-150 after:border-t after:border-b after:border-gray-300' : ''} focus:ring-2 focus:ring-offset-1 focus:ring-indigo-500`} aria-label={`Size ${size}${!available ? ' (out of stock)' : ''}${selected ? ' (selected)' : ''}`} aria-pressed={selected} > {size} </button> );


interface PointerInfoPeaky { id: string; label: string; circlePosition: { top: string; left: string; }; labelPosition: { top: string; left?: string; right?: string; }; estimatedLabelWidth: string; }
const pointersDataPeaky: PointerInfoPeaky[] = [ { id: 'shop-flat-cap', label: 'Flat Cap', circlePosition: { top: '10%', left: '48%' }, labelPosition: { top: '10%', right: '25%' }, estimatedLabelWidth: '60px' }, { id: 'shop-hugo-boss-shirt', label: 'Hugo Boss', circlePosition: { top: '37%', left: '40%' }, labelPosition: { top: '37%', right: '20%' }, estimatedLabelWidth: '80px' }, { id: 'shop-suspender', label: 'Suspender', circlePosition: { top: '33%', left: '37%' }, labelPosition: { top: '33%', left: '5%' }, estimatedLabelWidth: '80px' }, { id: 'shop-hugo-boss-trousers', label: 'Hugo Boss', circlePosition: { top: '60%', left: '40%' }, labelPosition: { top: '60%', left: '2%' }, estimatedLabelWidth: '80px' }, { id: 'shop-santoni-shoes', label: 'Santoni', circlePosition: { top: '87%', left: '43%' }, labelPosition: { top: '87%', left: '10%' }, estimatedLabelWidth: '70px' } ];
const PromoSectionPeaky: React.FC = () => { const peakyBlindersProductId = 100; const circleRadiusPx = 6; const diagonalVisualCenterPercent = 51.5; const diagonalTopXPercent = diagonalVisualCenterPercent + 5; const diagonalBottomXPercent = diagonalVisualCenterPercent - 5; const leftContentAreaWidth = `lg:w-[46.5%]`; const rightContentAreaWidth = `lg:w-[40%]`; const gapPadding = "lg:px-4 xl:px-6"; return ( <section className="overflow-hidden relative"> <div className="absolute inset-0 z-0" style={{ backgroundColor: '#FFFFFF', clipPath: `polygon(0 0, ${diagonalTopXPercent}% 0, ${diagonalBottomXPercent}% 100%, 0% 100%)` }} /> <div className="absolute inset-0 z-0" style={{ backgroundColor: '#E9E9E9', clipPath: `polygon(${diagonalTopXPercent}% 0, 100% 0, 100% 100%, ${diagonalBottomXPercent}% 100%)` }} /> <div className="absolute top-0 h-full bg-black z-10" style={{ width: '2px', left: `calc(${diagonalVisualCenterPercent}% - 1px)`, transform: 'skewX(-12deg)', transformOrigin: 'center center' }} /> <div className="container mx-auto px-4 py-16 md:py-20 relative z-20"> <div className="flex flex-col lg:flex-row items-center lg:justify-center"> <div className={`${leftContentAreaWidth} relative ${gapPadding.replace('px', 'pr')}`}> <div className="relative w-full"> <Image src="/images/pk2.svg" alt="Peaky Blinders Style Model" width={520} height={680} layout="responsive" className="object-contain"/> {pointersDataPeaky.map((p) => { const isLabelLeftOfCircle = p.labelPosition.left !== undefined; const lineTopCss = `calc(${p.circlePosition.top} - 0.5px)`; let lineLeftCss, lineWidthCss; if (isLabelLeftOfCircle) { lineLeftCss = `calc(${p.labelPosition.left} + ${p.estimatedLabelWidth})`; lineWidthCss = `calc((${p.circlePosition.left} - ${circleRadiusPx}px) - (${p.labelPosition.left} + ${p.estimatedLabelWidth}))`; } else { lineLeftCss = `calc(${p.circlePosition.left} + ${circleRadiusPx}px)`; lineWidthCss = `calc((100% - ${p.labelPosition.right!} - ${p.estimatedLabelWidth}) - (${p.circlePosition.left} + ${circleRadiusPx}px))`; } return ( <React.Fragment key={p.id}> <div className="absolute w-3 h-3 bg-white rounded-full z-30 border border-black" style={{ top: p.circlePosition.top, left: p.circlePosition.left, transform: 'translate(-50%, -50%)' }} /> <div className="absolute z-40 text-black bg-gray-200/90 border border-gray-400 shadow-md whitespace-nowrap px-2.5 py-1 rounded text-[10px] sm:text-xs pointer-events-none" style={{ top: p.labelPosition.top, left: p.labelPosition.left, right: p.labelPosition.right, transform: 'translateY(-50%)', width: p.estimatedLabelWidth }}>{p.label}</div> <div className="absolute bg-black z-20 pointer-events-none" style={{ top: lineTopCss, left: lineLeftCss, width: lineWidthCss, height: '1px' }}/> </React.Fragment> ); })} </div> </div> <div className={`${rightContentAreaWidth} text-left ${gapPadding.replace('px', 'pl')} pt-10 lg:pt-0 flex flex-col justify-center`}> <div> <p className="text-xs text-gray-500 uppercase tracking-wider mb-1 md:mb-2">Women Collection</p> <h2 className="text-3xl md:text-4xl font-bold mb-2 md:mb-3 text-gray-800" style={{ fontFamily: '"Times New Roman", Times, serif' }}>Peaky Blinders</h2> <h3 className="text-xs sm:text-sm font-semibold mb-1 md:mb-2 text-gray-700 uppercase tracking-wider underline">DESCRIPTION</h3> <p className="text-gray-600 mb-3 md:mb-4 text-xs sm:text-sm leading-snug sm:leading-normal">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque duis ultrices sollicitudin aliquam sem. Scelerisque duis ultrices sollicitudin. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque duis.</p> <div className="flex items-center mb-2 md:mb-3"> <span className="text-xs sm:text-sm font-medium mr-2 text-gray-700">Size:</span> <button type="button" className="bg-black text-white text-[10px] sm:text-xs w-7 h-7 sm:w-8 sm:h-8 flex items-center justify-center rounded">M</button> </div> <p className="text-2xl md:text-3xl font-bold text-gray-800 mb-4 md:mb-6">$100.00</p> <Link href={`/product/${peakyBlindersProductId}`} className="bg-black text-white font-semibold py-2.5 px-8 rounded hover:bg-gray-800 transition-colors text-xs sm:text-sm uppercase tracking-wider">Buy Now</Link> </div> </div> </div> </div> </section> ); };
const CountdownTimer = () => { const [timeLeft, setTimeLeft] = useState({ days: '02', hours: '06', minutes: '05', seconds: '30' }); useEffect(() => { const targetDate = new Date(); targetDate.setDate(targetDate.getDate() + 2); targetDate.setHours(targetDate.getHours() + 6); targetDate.setMinutes(targetDate.getMinutes() + 5); targetDate.setSeconds(targetDate.getSeconds() + 30); const timer = setInterval(() => { const now = new Date(); const difference = targetDate.getTime() - now.getTime(); if (difference <= 0) { clearInterval(timer); setTimeLeft({ days: '00', hours: '00', minutes: '00', seconds: '00' }); return; } const days = Math.floor(difference / (1000 * 60 * 60 * 24)); const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)); const seconds = Math.floor((difference % (1000 * 60)) / 1000); setTimeLeft({ days: String(days).padStart(2, '0'), hours: String(hours).padStart(2, '0'), minutes: String(minutes).padStart(2, '0'), seconds: String(seconds).padStart(2, '0'), }); }, 1000); return () => clearInterval(timer); }, []); const labels = { days: 'Days', hours: 'Hr', minutes: 'Mins', seconds: 'Sec' }; return ( <div className="pt-6 md:pt-8"> <h2 className="text-xl font-semibold text-gray-800 mb-3 text-center md:text-left"> Hurry, Before It's Too Late! </h2> <div className="flex space-x-2 sm:space-x-3 justify-center md:justify-start"> {(Object.keys(labels) as Array<keyof typeof timeLeft>).map((key) => ( <div key={key} className="bg-white py-2.5 px-3 sm:py-3 sm:px-3.5 rounded-md shadow-sm border border-gray-200 text-center min-w-[60px] sm:min-w-[65px]"> <div className="text-2xl sm:text-3xl font-bold text-gray-800 tabular-nums"> {timeLeft[key]} </div> <div className="text-[10px] sm:text-xs text-gray-500 uppercase tracking-wider"> {labels[key as keyof typeof labels]} </div> </div> ))} </div> </div> ); };
const DealsImageRowSlider = () => { const dealItemsForSlider = [ { id: 'deal-brown-hoodie', src: '/s2.svg', alt: 'Brown Hoodie Deal', saleLabel: '01 — Spring Deal' }, { id: 'deal-black-jacket', src: '/s3.svg', alt: 'Black Jacket Deal', saleLabel: '01 — Spring Deal' }, { id: 'deal-orange-hoodie', src: '/s4.svg', alt: 'Orange Hoodie Deal', saleLabel: '01 — Spring Deal' },]; const totalRealItems = dealItemsForSlider.length; const gap = 12; const displayItems = totalRealItems > 0 ? [dealItemsForSlider[totalRealItems - 1], ...dealItemsForSlider, dealItemsForSlider[0]] : []; const [currentSlideIndex, setCurrentSlideIndex] = useState(totalRealItems > 0 ? 1 : 0); const [isTransitioning, setIsTransitioning] = useState(true); const sliderRef = useRef<HTMLDivElement>(null); const [itemActualWidth, setItemActualWidth] = useState(0); const [viewportWidth, setViewportWidth] = useState(0); useEffect(() => { const sliderNode = sliderRef.current; if (!sliderNode) return; const parentElement = sliderNode.parentElement; if (parentElement) { const roViewport = new ResizeObserver(([entry]) => { setViewportWidth(entry.contentRect.width); }); roViewport.observe(parentElement); setViewportWidth(parentElement.offsetWidth); return () => roViewport.unobserve(parentElement); }}, []); useEffect(() => { const sliderNode = sliderRef.current; if (sliderNode && sliderNode.children.length > 1 && totalRealItems > 0) { const itemElement = sliderNode.children[1] as HTMLElement; if (itemElement) { const roItem = new ResizeObserver(([entry]) => { setItemActualWidth(entry.contentRect.width); }); roItem.observe(itemElement); setItemActualWidth(itemElement.offsetWidth); return () => roItem.disconnect(); }}}, [totalRealItems]); const itemWidthWithGap = itemActualWidth > 0 ? itemActualWidth + gap : 0; let translateXValue = 0; if (itemWidthWithGap > 0 && viewportWidth > 0 && itemActualWidth > 0 && totalRealItems > 0) { const offsetToCenterItem = (viewportWidth - itemActualWidth) / 2; translateXValue = (currentSlideIndex * itemWidthWithGap) - offsetToCenterItem; } const logicalCurrentIndex = totalRealItems > 0 ? (currentSlideIndex - 1 + totalRealItems) % totalRealItems : 0; const handleNavigation = (direction: 'next' | 'prev') => { if (totalRealItems === 0) return; setIsTransitioning(true); if (direction === 'next') { setCurrentSlideIndex(prev => prev + 1); } else { setCurrentSlideIndex(prev => prev - 1); }}; useEffect(() => { if (totalRealItems === 0) return; if (!isTransitioning && (currentSlideIndex === 0 || currentSlideIndex === totalRealItems + 1)) return; if (currentSlideIndex === 0 || currentSlideIndex === totalRealItems + 1) { const timer = setTimeout(() => { setIsTransitioning(false); if (currentSlideIndex === 0) setCurrentSlideIndex(totalRealItems); else if (currentSlideIndex === totalRealItems + 1) setCurrentSlideIndex(1); }, 500); return () => clearTimeout(timer); } else if (!isTransitioning) { const reenableTimer = setTimeout(() => setIsTransitioning(true), 50); return () => clearTimeout(reenableTimer); }}, [currentSlideIndex, totalRealItems, isTransitioning]); const renderItem = (itemData: { id: string; src: string; alt: string; saleLabel: string; }, displayIdx: number) => { if (!itemData) return null; const isEffectivelyActive = displayIdx === currentSlideIndex; let showSaleBox = false; let slotClasses = "relative flex-shrink-0 block w-[180px] sm:w-[220px] md:w-[200px] lg:w-[250px] xl:w-[280px] aspect-[3/4]"; let imageContainerClasses = "h-full w-full overflow-hidden rounded-lg bg-gray-100 "; let priority = false; const relativePosFromCenter = displayIdx - currentSlideIndex; if (relativePosFromCenter === 0) { imageContainerClasses += " shadow-xl"; priority = true; showSaleBox = true; slotClasses += " scale-105 z-20"; } else if (Math.abs(relativePosFromCenter) === 1) { slotClasses += " scale-90 opacity-70 z-10"; imageContainerClasses += " shadow-lg"; } else { slotClasses += " scale-75 opacity-40 z-0"; } let itemKey = itemData.id; if (displayIdx === 0) itemKey += "-clone-start"; if (displayIdx === displayItems.length - 1) itemKey += "-clone-end"; return ( <Link key={itemKey} href={`/product/${itemData.id}`}> <div className={slotClasses} style={{ marginRight: `${gap}px` }}> <div className={imageContainerClasses}> <Image src={itemData.src} alt={itemData.alt} fill style={{ objectFit: 'cover' }} priority={priority} sizes="(max-width: 640px) 180px, (max-width: 768px) 220px, (max-width: 1024px) 200px, (max-width: 1280px) 250px, 280px" /> </div> {showSaleBox && isEffectivelyActive && ( <div className="absolute bottom-3 left-3 sm:bottom-4 sm:left-4 bg-white px-3 py-2 sm:px-4 sm:py-2.5 rounded-md shadow-lg z-10 border border-gray-100"> <div className="text-[10px] sm:text-[11px] font-medium text-gray-700 tracking-wide">{itemData.saleLabel}</div> <div className="text-sm sm:text-base text-gray-900 font-bold tracking-normal mt-0.5">30% OFF</div> </div> )} </div> </Link> );}; if (totalRealItems === 0) return null; return ( <div className="relative w-full py-4"> <div className="overflow-hidden w-full"> <div ref={sliderRef} className="flex" style={{ transform: `translateX(-${translateXValue}px)`, transition: isTransitioning ? 'transform 0.5s ease-in-out' : 'none', }} > {displayItems.map((item, index) => renderItem(item, index))} </div> </div> {totalRealItems > 1 && ( <> <button onClick={() => handleNavigation('prev')} aria-label="Previous group" className="absolute left-2 sm:left-3 md:left-4 top-1/2 -translate-y-1/2 z-30 bg-white/80 hover:bg-white w-9 h-9 sm:w-10 sm:h-10 flex items-center justify-center rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="2.5" stroke="currentColor" className="w-5 h-5 text-gray-700"><path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" /></svg> </button> <button onClick={() => handleNavigation('next')} aria-label="Next group" className="absolute right-2 sm:right-3 md:right-4 top-1/2 -translate-y-1/2 z-30 bg-white/80 hover:bg-white w-9 h-9 sm:w-10 sm:h-10 flex items-center justify-center rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-400"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="2.5" stroke="currentColor" className="w-5 h-5 text-gray-700"><path strokeLinecap="round" strokeLinejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" /></svg> </button> </> )} {totalRealItems > 1 && ( <div className="absolute bottom-[-35px] sm:bottom-[-40px] left-1/2 transform -translate-x-1/2 flex space-x-2 pt-4 z-10"> {dealItemsForSlider.map((_, index) => ( <button key={`dot-${index}`} className={`h-2.5 w-2.5 rounded-full transition-all duration-150 ease-in-out focus:outline-none ${logicalCurrentIndex === index ? 'bg-gray-800 scale-110' : 'bg-gray-300 hover:bg-gray-400'}`} onClick={() => { setIsTransitioning(true); setCurrentSlideIndex(index + 1); }} aria-label={`Go to group ${index + 1}`} /> ))} </div> )} </div> ); };


export default function ProductDetailPage() {
  const params = useParams();
  const productId = params.productId as string;
  const { addToCart } = useCart();

  const [product, setProduct] = useState<Product | null>(null);
  const [selectedImage, setSelectedImage] = useState<ProductImage | null>(null);
  const [selectedColorHex, setSelectedColorHex] = useState<string | null>(null);
  const [selectedSize, setSelectedSize] = useState<string | null>(null);
  const [quantity, setQuantity] = useState<number>(1);
  const [isLoading, setIsLoading] = useState(true);
  const [buttonText, setButtonText] = useState('Add to cart');

  useEffect(() => {
    setIsLoading(true);
    if (productId) {
      const fetchProductTimer = setTimeout(() => {
        const foundProduct = allProductsData.find(p => p.id.toString() === productId);
        if (foundProduct) {
          setProduct(foundProduct);
          if (foundProduct.images && foundProduct.images.length > 0) {
            const initialImage = foundProduct.images[0];
            setSelectedImage(initialImage); setSelectedColorHex(initialImage.colorHex);
          }
          if (foundProduct.availableSizes && foundProduct.availableSizes.length > 0) {
            const firstAvailableInStockSize = foundProduct.availableSizes.find(s => foundProduct.stockQuantity && foundProduct.stockQuantity[s] && foundProduct.stockQuantity[s].current > 0);
            if (firstAvailableInStockSize) setSelectedSize(firstAvailableInStockSize); else setSelectedSize(foundProduct.availableSizes[0]);
          } else if (foundProduct.sizes?.includes("One Size")) { setSelectedSize("One Size"); }
        }
        setIsLoading(false);
      }, 100);
      return () => clearTimeout(fetchProductTimer);
    } else { setIsLoading(false); }
  }, [productId]);

  const [pdpTimeLeft, setPdpTimeLeft] = useState({ days: 0, hours: 5, minutes: 59, seconds: 47 });
  useEffect(() => {
    if (!product) return;
    const intervalId = setInterval(() => {
      setPdpTimeLeft(prev => {
        let { days, hours, minutes, seconds } = prev;
        if (seconds > 0) seconds--; else { seconds = 59; if (minutes > 0) minutes--; else { minutes = 59; if (hours > 0) hours--; else { hours = 23; if (days > 0) days--; else { clearInterval(intervalId); return { days: 0, hours: 0, minutes: 0, seconds: 0 }; }}}}
        return { days, hours, minutes, seconds };
      });
    }, 1000);
    return () => clearInterval(intervalId);
  }, [product]);
  const formatTime = (num: number) => num.toString().padStart(2, '0');

  const handleThumbnailClick = (image: ProductImage) => { setSelectedImage(image); if (image.colorHex !== selectedColorHex) setSelectedColorHex(image.colorHex); };
  const handleColorSwatchClick = (colorHex: string) => { if (!product) return; const newImageForColor = product.images.find(img => img.colorHex === colorHex); if (newImageForColor) { setSelectedImage(newImageForColor); setSelectedColorHex(colorHex); } else { setSelectedColorHex(colorHex); if(product.images.length > 0) setSelectedImage(product.images[0]); }};
  const handleSizeClick = (size: string) => { if (product?.stockQuantity && product.stockQuantity[size] && product.stockQuantity[size].current > 0) setSelectedSize(size); };
  const handleQuantityChange = (amount: number) => { setQuantity(prev => Math.max(1, prev + amount)); };
  const handleAddToCartClick = () => { if (product && selectedImage && selectedColorHex !== null && (product.availableSizes ? selectedSize !== null : true) ) { addToCart(product, quantity, selectedSize, selectedColorHex, selectedImage.url); setButtonText('Added!'); setTimeout(() => setButtonText('Add to cart'), 2000); } else { let alertMessage = "Please make your selections: "; if (!selectedColorHex) alertMessage += "Color. "; if (product?.availableSizes && !selectedSize) alertMessage += "Size. "; alert(alertMessage.trim() || "Product details incomplete."); }};
  const stockDetailForSelectedSize = selectedSize && product?.stockQuantity ? product.stockQuantity[selectedSize] : undefined;
  const currentStockForSelectedSize = stockDetailForSelectedSize?.current;
  const isAddToCartDisabled = !product || !selectedImage || selectedColorHex === null || (product.availableSizes && product.availableSizes.length > 0 && selectedSize === null) || (currentStockForSelectedSize !== undefined && currentStockForSelectedSize === 0);
  let addToCartButtonTextCalculated = 'Add to cart';
  if(!product) addToCartButtonTextCalculated = 'Loading...';
  else if (!selectedColorHex && product.images && product.images.length > 0) addToCartButtonTextCalculated = 'Select Color';
  else if (product.availableSizes && product.availableSizes.length > 0 && !selectedSize) addToCartButtonTextCalculated = 'Select Size';
  else if (currentStockForSelectedSize === 0) addToCartButtonTextCalculated = 'Out of Stock';
  const initialStockForProgressBar = stockDetailForSelectedSize?.initial || Math.max(10, currentStockForSelectedSize || 0);

  if (isLoading) { return ( <> <Navbar /> <main className="container mx-auto px-4 py-20 min-h-screen flex items-center justify-center"> <p>Loading product...</p> </main> <Footer /> </> ); }
  if (!product) { return ( <> <Navbar /> <main className="container mx-auto px-4 py-20 min-h-screen"> <h1 className="text-2xl font-semibold text-center">Product Not Found</h1> <p className="text-center mt-4"> <Link href="/shop" className="text-indigo-600 hover:underline">Return to Shop</Link> </p> </main> <Footer /> </> ); }

  return (
    <>
      <Navbar />
      <main className="container mx-auto px-4 py-8 md:py-12 pt-20 md:pt-24">
        <div className="text-xs text-gray-500 mb-6"> <Link href="/" className="hover:underline">Home</Link> <span className="mx-1">/</span> <Link href="/shop" className="hover:underline">Shop</Link> <span className="mx-1">/</span> <span className="text-gray-700">{product.name}</span> </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12 lg:gap-16">
          <div className="space-y-4">
             <div className="relative aspect-[1/1.25] bg-gray-100 overflow-hidden rounded-lg shadow-lg">
              {selectedImage ? ( <Image src={selectedImage.url} alt={selectedImage.altText || `${product.name} - ${selectedColorHex}`} fill style={{objectFit:"cover"}} key={selectedImage.url} onError={(e) => { (e.target as HTMLImageElement).src = PLACEHOLDER_IMAGE_URL; }} priority />
              ) : product.images && product.images.length > 0 ? ( <Image src={product.images[0].url} alt={product.images[0].altText || `${product.name}`} fill style={{objectFit:"cover"}} onError={(e) => { (e.target as HTMLImageElement).src = PLACEHOLDER_IMAGE_URL; }} priority />
              ) : ( <Image src={PLACEHOLDER_IMAGE_URL} alt="Product placeholder" fill style={{objectFit:"cover"}} priority /> )}
            </div>
            <div className="grid grid-cols-5 gap-2"> {product.images.slice(0, 5).map((img) => ( <button key={img.url} type="button" onClick={() => handleThumbnailClick(img)} className={`aspect-square relative rounded overflow-hidden border-2 transition-all ${selectedImage?.url === img.url ? 'border-black ring-1 ring-black' : 'border-transparent hover:border-gray-400'} focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-indigo-500`} > <Image src={img.url} alt={img.altText || `Thumbnail for ${product.name}`} fill style={{objectFit:"cover"}} onError={(e) => { (e.target as HTMLImageElement).src = PLACEHOLDER_IMAGE_URL; }} /> </button> ))} </div>
          </div>
          <div className="space-y-4 md:space-y-5">
            <p className="text-xs uppercase tracking-wider text-gray-500">{product.brand}</p>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900">{product.name}</h1>
            <div className="flex items-center"> {[...Array(5)].map((_, i) => ( <svg key={i} className={`w-5 h-5 ${i < (product.rating || 0) ? 'text-yellow-400' : 'text-gray-300'}`} fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" /></svg> ))} {product.reviewCount !== undefined && <span className="ml-2 text-sm text-gray-500">({product.reviewCount} Reviews)</span>} <button type="button" className="ml-auto text-gray-400 hover:text-red-500 focus:outline-none" title="Add to wishlist"> <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg> </button> </div>
            <div className="flex items-baseline space-x-2"> <p className="text-3xl font-bold text-gray-900">{product.price}</p> {product.originalPrice && (<p className="text-lg text-gray-400 line-through">{product.originalPrice}</p>)} {product.originalPrice && product.priceValue < parseFloat(product.originalPrice.replace('$', '')) && (<span className="text-xs font-semibold text-red-500 bg-red-100 px-2 py-0.5 rounded"> SAVE {Math.round((1 - product.priceValue / parseFloat(product.originalPrice.replace('$', ''))) * 100)}% </span>)} </div>
            <p className="text-sm text-gray-600 flex items-center"> <svg className="w-4 h-4 mr-1.5 text-gray-500" fill="currentColor" viewBox="0 0 20 20"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z"></path><path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd"></path></svg> 24 people are viewing this right now </p>
            <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md" role="alert"> <p className="font-medium text-sm">Hurry up! Sale ends in:</p> <div className="flex items-center justify-center space-x-2 sm:space-x-4 mt-1 text-lg sm:text-xl font-mono"> <span>{formatTime(pdpTimeLeft.days)}</span><span className="text-xs opacity-75">D</span> <span className="text-gray-300">:</span> <span>{formatTime(pdpTimeLeft.hours)}</span><span className="text-xs opacity-75">H</span> <span className="text-gray-300">:</span> <span>{formatTime(pdpTimeLeft.minutes)}</span><span className="text-xs opacity-75">M</span> <span className="text-gray-300">:</span> <span>{formatTime(pdpTimeLeft.seconds)}</span><span className="text-xs opacity-75">S</span> </div> </div>
            {product.availableSizes && selectedSize && currentStockForSelectedSize !== undefined && currentStockForSelectedSize < 10 && currentStockForSelectedSize > 0 && ( <div className="my-3"> <p className="text-xs text-red-600 mb-1">Only {currentStockForSelectedSize} item(s) left in stock!</p> <div className="w-full bg-gray-200 rounded-full h-1.5"> <div className="bg-red-500 h-1.5 rounded-full" style={{ width: `${initialStockForProgressBar > 0 ? (currentStockForSelectedSize / initialStockForProgressBar) * 100 : 0}%` }}></div> </div> </div> )}
            {product.images.length > 0 && (<div> <p className="text-sm font-medium text-gray-700 mb-2">Color: <span className="font-normal text-gray-900">{product.images.find(img => img.colorHex === selectedColorHex)?.altText?.split(' ').pop() || selectedColorHex}</span></p> <div className="flex flex-wrap gap-2"> {product.images.map((img) => ( <ColorSwatchPDP key={img.colorHex + '-' + img.url} color={img.colorHex} selected={selectedColorHex === img.colorHex} onClick={() => handleColorSwatchClick(img.colorHex)} /> ))} </div> </div>)}
            {product.availableSizes && product.availableSizes.length > 0 && (<div> <div className="flex justify-between items-center mb-2"> <p className="text-sm font-medium text-gray-700">Size: <span className="font-normal text-gray-900">{selectedSize || ''}</span></p> <a href="#" className="text-xs text-indigo-600 hover:underline">Size Guide</a> </div> <div className="flex flex-wrap gap-2"> {product.availableSizes.map((size) => ( <SizeButtonPDP key={size} size={size} selected={selectedSize === size} available={product.stockQuantity ? (product.stockQuantity[size]?.current > 0) : true} onClick={() => handleSizeClick(size)} /> ))} </div> </div>)}
            <div> <p className="text-sm font-medium text-gray-700 mb-2">Quantity:</p> <div className="flex items-center border border-gray-300 rounded w-max"> <button type="button" onClick={() => handleQuantityChange(-1)} className="px-3 py-2 text-gray-600 hover:bg-gray-100 focus:outline-none">-</button> <input type="text" readOnly value={quantity} className="w-12 text-center border-l border-r border-gray-300 py-2 focus:outline-none" /> <button type="button" onClick={() => handleQuantityChange(1)} className="px-3 py-2 text-gray-600 hover:bg-gray-100 focus:outline-none">+</button> </div> </div>
            <button type="button" onClick={handleAddToCartClick} disabled={isAddToCartDisabled} className={`w-full text-white py-3 px-6 rounded font-semibold text-sm uppercase tracking-wider transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black ${isAddToCartDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-black hover:bg-gray-800'} ${buttonText === 'Added!' ? '!bg-green-500 hover:!bg-green-600' : ''}`} > {buttonText === 'Add to cart' ? addToCartButtonTextCalculated : buttonText} </button>
            <div className="flex items-center justify-start space-x-6 pt-3 text-sm text-gray-600"> <button type="button" className="hover:text-black flex items-center focus:outline-none"><svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16V4m0 12L3 8l4-4m5 12l4-4-4-4"/></svg> Compare</button> <button type="button" className="hover:text-black flex items-center focus:outline-none"><svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.79 4 4s-1.79 4-4 4c-1.742 0-3.223-.835-3.772-2H6.5A2.5 2.5 0 014 11.5V7A2.5 2.5 0 016.5 4.5h8.75a2.5 2.5 0 010 5H8.228z"></path></svg> Ask a question</button> <button type="button" className="hover:text-black flex items-center focus:outline-none"><svg className="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"></path></svg> Share</button> </div>
            <div className="border-t border-gray-200 pt-5 space-y-2 text-sm"> <p className="flex items-center text-gray-700"><svg className="w-5 h-5 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/><path d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/></svg>Estimated Delivery: Jul 30 - Aug 03</p> <p className="flex items-center text-gray-700"><svg className="w-5 h-5 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 15v-1a4 4 0 00-4-4H8m0 0l3 3m-3-3l3-3m9 14V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2h10a2 2 0 002-2z"></path></svg>Free Shipping & Returns: On all orders over $75</p> </div>
            
            <div className="bg-gray-50 p-4 rounded-md">
              <div className="flex justify-center items-center space-x-3">
                <Image 
                  src="/images/payment/visa.svg" 
                  alt="Accepted Payment Methods"
                  width={280} 
                 height={30}  
                    className="object-contain" 
                />
              </div>
              <p className="text-center text-xs text-gray-600 mt-2">Guarantee safe & secure checkout</p>
            </div>

          </div>
        </div>
        {product.detailedDescription && ( <div className="mt-12 md:mt-16 border-t border-gray-200 pt-8"> <h2 className="text-xl font-semibold text-gray-900 mb-4">Description</h2> <div className="prose prose-sm max-w-none text-gray-600" dangerouslySetInnerHTML={{ __html: product.detailedDescription.replace(/\n/g, '<br />') }} /> </div> )}
      </main>

      <PromoSectionPeaky />
      
      <section className="w-full py-12 md:py-16 lg:py-20 px-4 sm:px-6 lg:px-8 bg-white">
        <div className="max-w-6xl mx-auto grid md:grid-cols-2 gap-x-8 lg:gap-x-12 xl:gap-x-16 gap-y-10 items-center">
          <div className="space-y-5 md:space-y-6 text-center md:text-left">
            <h1 className="text-[32px] sm:text-[34px] font-bold text-gray-900 leading-tight">Deals Of The Month</h1>
            <div className="text-gray-600 text-[15px] leading-relaxed space-y-1.5">
              <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
              <p>Scelerisque duis ultrices sollicitudin aliquam sem.</p>
              <p>Scelerisque duis ultrices sollicitudin</p>
            </div>
            <button className="px-7 py-3 bg-gray-900 text-white rounded-md text-[14px] font-semibold tracking-normal hover:bg-gray-800 transition-colors shadow-md focus:outline-none focus:ring-2 focus:ring-gray-900 focus:ring-offset-2">Buy Now</button>
            <CountdownTimer />
          </div>
          <div className="mt-6 md:mt-0">
            <DealsImageRowSlider />
          </div>
        </div>
      </section>

      <NewsletterSection />
      <Footer />
    </>
  );
}